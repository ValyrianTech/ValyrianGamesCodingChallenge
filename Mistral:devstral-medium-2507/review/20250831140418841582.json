{
  "conversation_id": "20250831140418841582",
  "timestamp": "2025-08-31T16:09:20.002706",
  "directory": "/volumes/Serendipity/ValyrianGames",
  "conversation_directory": "/volumes/Serendipity/ValyrianGames/conversations",
  "parameters": {
    "validation_attempts": 5,
    "success_threshold": 0.5,
    "agent": "Contender"
  },
  "validation_results": {
    "total_attempts": 5,
    "correct_answers": 5,
    "success_rate": 1.0,
    "accepted": true
  },
  "status": "ACCEPTED",
  "challenge": {
    "challenge_prompt": "You are given a list of integers. Your task is to find the longest subarray that contains at most two distinct integers. Return the length of this subarray.\n\nExample:\nInput: [1, 2, 1, 2, 3, 3, 1, 3, 2, 2, 2, 1, 1, 3]\nOutput: 9\n\nExplanation: The longest subarray with at most two distinct integers is [3, 3, 1, 3, 2, 2, 2, 1, 1], which has a length of 9.",
    "example_code": "def longest_subarray_with_two_distinct(nums):\n    if not nums:\n        return 0\n\n    left = 0\n    max_length = 0\n    char_map = {}\n\n    for right in range(len(nums)):\n        char_map[nums[right]] = right\n\n        if len(char_map) > 2:\n            # Find the leftmost character to remove\n            leftmost = min(char_map.values())\n            del char_map[nums[leftmost]]\n            left = leftmost + 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n\n# Example usage\nnums = [1, 2, 1, 2, 3, 3, 1, 3, 2, 2, 2, 1, 1, 3]\nprint(longest_subarray_with_two_distinct(nums))  # Output: 9",
    "expected_answer": 9
  },
  "solution_attempts": [
    {
      "filename": "challenge_candidate_solution_1756649219.json",
      "answer": 9,
      "python_code": "def longest_subarray_with_two_distinct(nums):\n    if not nums:\n        return 0\n\n    max_length = 0\n    left = 0\n    distinct_count = 0\n    freq = {}\n\n    for right in range(len(nums)):\n        if nums[right] in freq:\n            freq[nums[right]] += 1\n        else:\n            freq[nums[right]] = 1\n            distinct_count += 1\n\n        while distinct_count > 2:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n                distinct_count -= 1\n            left += 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n\n# Example usage\nnums = [1, 2, 1, 2, 3, 3, 1, 3, 2, 2, 2, 1, 1, 3]\nprint(longest_subarray_with_two_distinct(nums))  # Output: 9",
      "is_correct": true
    },
    {
      "filename": "challenge_candidate_solution_1756649254.json",
      "answer": 9,
      "python_code": "def longest_subarray_with_two_distinct(nums):\n    if not nums:\n        return 0\n\n    left = 0\n    max_length = 0\n    char_map = {}\n\n    for right in range(len(nums)):\n        char_map[nums[right]] = right\n\n        if len(char_map) > 2:\n            # Find the leftmost value to remove\n            leftmost = min(char_map.values())\n            del char_map[nums[leftmost]]\n            left = leftmost + 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n\n# Example usage\ninput_list = [1, 2, 1, 2, 3, 3, 1, 3, 2, 2, 2, 1, 1, 3]\nprint(longest_subarray_with_two_distinct(input_list))  # Output: 9",
      "is_correct": true
    },
    {
      "filename": "challenge_candidate_solution_1756649285.json",
      "answer": 9,
      "python_code": "def longest_subarray_with_two_distinct(nums):\n    if not nums:\n        return 0\n\n    max_length = 0\n    left = 0\n    distinct_count = 0\n    last_seen = {}\n\n    for right in range(len(nums)):\n        if nums[right] not in last_seen:\n            distinct_count += 1\n        last_seen[nums[right]] = right\n\n        while distinct_count > 2:\n            if last_seen[nums[left]] == left:\n                del last_seen[nums[left]]\n                distinct_count -= 1\n            left += 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n\n# Example usage\ninput_list = [1, 2, 1, 2, 3, 3, 1, 3, 2, 2, 2, 1, 1, 3]\nprint(longest_subarray_with_two_distinct(input_list))  # Output: 9",
      "is_correct": true
    },
    {
      "filename": "challenge_candidate_solution_1756649319.json",
      "answer": 9,
      "python_code": "def longest_subarray_with_two_distinct(nums):\n    if not nums:\n        return 0\n\n    left = 0\n    max_len = 0\n    distinct_count = 0\n    freq = {}\n\n    for right in range(len(nums)):\n        if nums[right] in freq:\n            freq[nums[right]] += 1\n        else:\n            freq[nums[right]] = 1\n            distinct_count += 1\n\n        while distinct_count > 2:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n                distinct_count -= 1\n            left += 1\n\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n# Example usage\ninput_list = [1, 2, 1, 2, 3, 3, 1, 3, 2, 2, 2, 1, 1, 3]\nprint(longest_subarray_with_two_distinct(input_list))  # Output: 9\n",
      "is_correct": true
    },
    {
      "filename": "challenge_candidate_solution_1756649355.json",
      "answer": 9,
      "python_code": "def longest_subarray_with_two_distinct(nums):\n    if not nums:\n        return 0\n\n    left = 0\n    max_length = 0\n    distinct_count = 0\n    freq = {}\n\n    for right in range(len(nums)):\n        if nums[right] in freq:\n            freq[nums[right]] += 1\n        else:\n            freq[nums[right]] = 1\n            distinct_count += 1\n\n        while distinct_count > 2:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n                distinct_count -= 1\n            left += 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n\n# Test the function with the provided example\ninput_array = [1, 2, 1, 2, 3, 3, 1, 3, 2, 2, 2, 1, 1, 3]\nprint(longest_subarray_with_two_distinct(input_array))",
      "is_correct": true
    }
  ],
  "performance_metrics": {
    "model_name": "Mistral:devstral-medium-2507",
    "temperature": 0.64,
    "total_completion_tokens": 14093,
    "total_cost": 0.0398112,
    "total_elapsed_time": 142.39500400000003,
    "tokens_per_second": 98.97116896039412
  }
}